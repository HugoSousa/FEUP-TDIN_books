//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReceiptConsole.StoreService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Receipt", Namespace="http://schemas.datacontract.org/2004/07/OrderStore")]
    [System.SerializableAttribute()]
    public partial class Receipt : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalPriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Client {
            get {
                return this.ClientField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                    this.ClientField = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalPrice {
            get {
                return this.TotalPriceField;
            }
            set {
                if ((this.TotalPriceField.Equals(value) != true)) {
                    this.TotalPriceField = value;
                    this.RaisePropertyChanged("TotalPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StoreService.IOrderService", CallbackContract=typeof(ReceiptConsole.StoreService.IOrderServiceCallback))]
    public interface IOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/CreateOrder", ReplyAction="http://tempuri.org/IOrderService/CreateOrderResponse")]
        int CreateOrder(string title, string client, string email, string address, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/CreateOrder", ReplyAction="http://tempuri.org/IOrderService/CreateOrderResponse")]
        System.Threading.Tasks.Task<int> CreateOrderAsync(string title, string client, string email, string address, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetStock", ReplyAction="http://tempuri.org/IOrderService/GetStockResponse")]
        int GetStock(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetStock", ReplyAction="http://tempuri.org/IOrderService/GetStockResponse")]
        System.Threading.Tasks.Task<int> GetStockAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/StoreSell", ReplyAction="http://tempuri.org/IOrderService/StoreSellResponse")]
        int StoreSell(string title, string client, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/StoreSell", ReplyAction="http://tempuri.org/IOrderService/StoreSellResponse")]
        System.Threading.Tasks.Task<int> StoreSellAsync(string title, string client, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateStock", ReplyAction="http://tempuri.org/IOrderService/UpdateStockResponse")]
        int UpdateStock(string title, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateStock", ReplyAction="http://tempuri.org/IOrderService/UpdateStockResponse")]
        System.Threading.Tasks.Task<int> UpdateStockAsync(string title, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/ChangeOrderState", ReplyAction="http://tempuri.org/IOrderService/ChangeOrderStateResponse")]
        int ChangeOrderState(int id, char state, string stateDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/ChangeOrderState", ReplyAction="http://tempuri.org/IOrderService/ChangeOrderStateResponse")]
        System.Threading.Tasks.Task<int> ChangeOrderStateAsync(int id, char state, string stateDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrder", ReplyAction="http://tempuri.org/IOrderService/GetOrderResponse")]
        System.Data.DataTable GetOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrder", ReplyAction="http://tempuri.org/IOrderService/GetOrderResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetOrderAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetBooks", ReplyAction="http://tempuri.org/IOrderService/GetBooksResponse")]
        System.Data.DataTable GetBooks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetBooks", ReplyAction="http://tempuri.org/IOrderService/GetBooksResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/TestMSMQ", ReplyAction="http://tempuri.org/IOrderService/TestMSMQResponse")]
        void TestMSMQ(string body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/TestMSMQ", ReplyAction="http://tempuri.org/IOrderService/TestMSMQResponse")]
        System.Threading.Tasks.Task TestMSMQAsync(string body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Subscribe", ReplyAction="http://tempuri.org/IOrderService/SubscribeResponse")]
        void Subscribe(string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Subscribe", ReplyAction="http://tempuri.org/IOrderService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Unsubscribe", ReplyAction="http://tempuri.org/IOrderService/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Unsubscribe", ReplyAction="http://tempuri.org/IOrderService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/PrintReceipt", ReplyAction="http://tempuri.org/IOrderService/PrintReceiptResponse")]
        void PrintReceipt(string printer, ReceiptConsole.StoreService.Receipt receipt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/PrintReceipt", ReplyAction="http://tempuri.org/IOrderService/PrintReceiptResponse")]
        System.Threading.Tasks.Task PrintReceiptAsync(string printer, ReceiptConsole.StoreService.Receipt receipt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAvailablePrinters", ReplyAction="http://tempuri.org/IOrderService/GetAvailablePrintersResponse")]
        string[] GetAvailablePrinters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAvailablePrinters", ReplyAction="http://tempuri.org/IOrderService/GetAvailablePrintersResponse")]
        System.Threading.Tasks.Task<string[]> GetAvailablePrintersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOrderService/OnSuccessfullSell")]
        void OnSuccessfullSell();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOrderService/OnSucessfullStockUpdate")]
        void OnSucessfullStockUpdate();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOrderService/OnPrint")]
        void OnPrint(ReceiptConsole.StoreService.Receipt receipt);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : ReceiptConsole.StoreService.IOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.DuplexClientBase<ReceiptConsole.StoreService.IOrderService>, ReceiptConsole.StoreService.IOrderService {
        
        public OrderServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public OrderServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public OrderServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int CreateOrder(string title, string client, string email, string address, int quantity) {
            return base.Channel.CreateOrder(title, client, email, address, quantity);
        }
        
        public System.Threading.Tasks.Task<int> CreateOrderAsync(string title, string client, string email, string address, int quantity) {
            return base.Channel.CreateOrderAsync(title, client, email, address, quantity);
        }
        
        public int GetStock(string title) {
            return base.Channel.GetStock(title);
        }
        
        public System.Threading.Tasks.Task<int> GetStockAsync(string title) {
            return base.Channel.GetStockAsync(title);
        }
        
        public int StoreSell(string title, string client, int quantity) {
            return base.Channel.StoreSell(title, client, quantity);
        }
        
        public System.Threading.Tasks.Task<int> StoreSellAsync(string title, string client, int quantity) {
            return base.Channel.StoreSellAsync(title, client, quantity);
        }
        
        public int UpdateStock(string title, int quantity) {
            return base.Channel.UpdateStock(title, quantity);
        }
        
        public System.Threading.Tasks.Task<int> UpdateStockAsync(string title, int quantity) {
            return base.Channel.UpdateStockAsync(title, quantity);
        }
        
        public int ChangeOrderState(int id, char state, string stateDate) {
            return base.Channel.ChangeOrderState(id, state, stateDate);
        }
        
        public System.Threading.Tasks.Task<int> ChangeOrderStateAsync(int id, char state, string stateDate) {
            return base.Channel.ChangeOrderStateAsync(id, state, stateDate);
        }
        
        public System.Data.DataTable GetOrder(int id) {
            return base.Channel.GetOrder(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetOrderAsync(int id) {
            return base.Channel.GetOrderAsync(id);
        }
        
        public System.Data.DataTable GetBooks() {
            return base.Channel.GetBooks();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBooksAsync() {
            return base.Channel.GetBooksAsync();
        }
        
        public void TestMSMQ(string body) {
            base.Channel.TestMSMQ(body);
        }
        
        public System.Threading.Tasks.Task TestMSMQAsync(string body) {
            return base.Channel.TestMSMQAsync(body);
        }
        
        public void Subscribe(string printer) {
            base.Channel.Subscribe(printer);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(string printer) {
            return base.Channel.SubscribeAsync(printer);
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
        
        public void PrintReceipt(string printer, ReceiptConsole.StoreService.Receipt receipt) {
            base.Channel.PrintReceipt(printer, receipt);
        }
        
        public System.Threading.Tasks.Task PrintReceiptAsync(string printer, ReceiptConsole.StoreService.Receipt receipt) {
            return base.Channel.PrintReceiptAsync(printer, receipt);
        }
        
        public string[] GetAvailablePrinters() {
            return base.Channel.GetAvailablePrinters();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailablePrintersAsync() {
            return base.Channel.GetAvailablePrintersAsync();
        }
    }
}
